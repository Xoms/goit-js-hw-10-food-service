{"version":3,"sources":["webpack:///./components/themeController.js","webpack:///./components/menuController.js"],"names":["Theme","document","querySelector","body","classList","localStorage","getItem","this","checkSwitchState","bodyClasses","add","currentTheme","changeThemeHandler","bind","themeSwitcher","addEventListener","checked","contains","replace","setItem","template","require","compile","menu","parseToHTML","forEach","item","liElements","push","render","ul","li","innerHTML"],"mappings":"sgKAAA,IAAMA,EACK,cADLA,EAEI,a,GAuCc,I,WA9BpB,aAAa,uBAJGC,SAASC,cAAc,qBAI1B,qBAHCD,SAASE,KAAKC,WAGf,sBAFEC,aAAaC,QAAQ,UAAYN,GAG5CO,KAAKC,mBACLD,KAAKE,YAAYC,IAAIH,KAAKI,cAE1BJ,KAAKK,mBAAqBL,KAAKK,mBAAmBC,KAAKN,MAEvDA,KAAKO,cAAcC,iBAAiB,SAAUR,KAAKK,oB,2BAGvDJ,iBAAA,WACID,KAAKI,eAAiBX,EAAcO,KAAKO,cAAcE,SAAU,EAC7DT,KAAKO,cAAcE,SAAU,G,EAGrCJ,mBAAA,WACQL,KAAKE,YAAYQ,SAASjB,IAE1BO,KAAKE,YAAYS,QAAQlB,EAAaA,GACtCK,aAAac,QAAQ,QAASnB,KAI9BO,KAAKE,YAAYS,QAAQlB,EAAYA,GACrCK,aAAac,QAAQ,QAASnB,K,qCChC1C,IAuCMoB,EAvCaC,EAAQ,QAuCCC,QArCT,ktBA8DI,I,WAnBnB,a,YAFa,I,EAEA,gB,EAAA,M,sFACTf,KAAKgB,KAAOA,E,2BAGhBC,YAAA,WAAa,WACTjB,KAAKgB,KAAKE,SAAS,SAAAC,GACf,EAAKC,WAAWC,KAAKR,EAASM,Q,EAItCG,OAAA,WACItB,KAAKiB,cACL,IAAMM,EAAK7B,SAASC,cAAc,YAClCK,KAAKoB,WAAWF,SAAQ,SAAAM,GACpBD,EAAGE,WAAaD,M,OAMbF,W","file":"main.a061640a67f944523b58.js","sourcesContent":["const Theme = {\r\n    LIGHT: 'light-theme',\r\n    DARK: 'dark-theme',\r\n  };\r\n\r\nclass ThemeController {\r\n\r\n    themeSwitcher = document.querySelector('.js-switch-input');\r\n    bodyClasses = document.body.classList;\r\n    currentTheme = localStorage.getItem('theme') || Theme.LIGHT;\r\n\r\n    constructor(){\r\n        this.checkSwitchState()\r\n        this.bodyClasses.add(this.currentTheme);\r\n\r\n        this.changeThemeHandler = this.changeThemeHandler.bind(this);\r\n        //будем слушать чекбокс\r\n        this.themeSwitcher.addEventListener('change', this.changeThemeHandler);\r\n    }\r\n\r\n    checkSwitchState(){ //проверяет в каком состоянии был чекбокс и в такое его и ставит\r\n        this.currentTheme === Theme.LIGHT ? this.themeSwitcher.checked = false :\r\n            this.themeSwitcher.checked = true; \r\n    }\r\n\r\n    changeThemeHandler (){\r\n        if (this.bodyClasses.contains(Theme.LIGHT) ) {\r\n\r\n            this.bodyClasses.replace(Theme.LIGHT, Theme.DARK);\r\n            localStorage.setItem('theme', Theme.DARK);\r\n\r\n        } else {\r\n\r\n            this.bodyClasses.replace(Theme.DARK, Theme.LIGHT);\r\n            localStorage.setItem('theme', Theme.LIGHT);\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst themeController = new ThemeController;\r\n","import menu from '../menu.json';\r\n\r\nconst Handlebars = require('handlebars');\r\n\r\nconst itemSource = \r\n`<li class=\"menu__item\">\r\n<div class=\"card\">\r\n  <img\r\n    src=\"{{ image }}\"\r\n    alt=\"{{ name }}\"\r\n    class=\"card__image\"\r\n  />\r\n  <div class=\"card__content\">\r\n    <h2 class=\"card__name\">{{ name }}</h2>\r\n    <p class=\"card__price\">\r\n      <i class=\"material-icons\">\r\n        monetization_on\r\n      </i>\r\n      {{price}} кредитов\r\n    </p>\r\n\r\n    <p class=\"card__descr\">\r\n      {{description}}\r\n    </p>\r\n\r\n    <ul class=\"tag-list\">\r\n        {{#each ingerdients}}\r\n            <li class=\"tag-list__item\">{{this}}</li>\r\n        {{/each}}\r\n    </ul>\r\n  </div>\r\n\r\n  <button class=\"card__button button\">\r\n    <i class=\"material-icons button__icon\">\r\n      shopping_cart\r\n    </i>\r\n    В корзину\r\n  </button>\r\n</div>\r\n</li>`;\r\n\r\nconst template = Handlebars.compile(itemSource);\r\n\r\nclass MenuController {\r\n\r\n    liElements = []; //будущий массив li HTML\r\n\r\n    constructor(){\r\n        this.menu = menu; //когда писал JSON.parse(menu) - почему-то валило ошибку\r\n    }\r\n\r\n    parseToHTML(){\r\n        this.menu.forEach( item  => {\r\n            this.liElements.push(template(item));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.parseToHTML();\r\n        const ul = document.querySelector('.js-menu');\r\n        this.liElements.forEach(li => {\r\n            ul.innerHTML += li;\r\n        });\r\n    }\r\n}\r\n\r\nconst menuController = new MenuController;\r\nmenuController.render();"],"sourceRoot":""}